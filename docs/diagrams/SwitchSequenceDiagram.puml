@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":ExpenseBookParser" as ExpenseBookParser LOGIC_COLOR
participant "s:SwitchCommand" as SwitchCommand LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
participant ":ExpenseBook" as ExpenseBook MODEL_COLOR
end box
[-> LogicManager : execute(switch)
activate LogicManager

LogicManager -> ExpenseBookParser : parseCommand(switch)
activate ExpenseBookParser

create SwitchCommand
ExpenseBookParser -> SwitchCommand
activate SwitchCommand

SwitchCommand --> ExpenseBookParser
deactivate SwitchCommand

ExpenseBookParser --> LogicManager : s
deactivate ExpenseBookParser

LogicManager -> SwitchCommand : execute()
activate SwitchCommand

SwitchCommand -> Model : hasCategory(category)
activate Model

Model -> ExpenseBook : containsCategory(toCheck)
activate ExpenseBook

ExpenseBook -> Model : containsCategory
deactivate ExpenseBook

Model -> SwitchCommand : hasCategory
deactivate Model

SwitchCommand -> Model : switchCategory(category)
activate Model

Model -> Model : updateExpenseBookCategory(category)
activate Model

Model -> Model : updateFilteredBudgetList(predicate)
activate Model

Model -> ExpenseBook : updateFilteredBudgets(predicate)
activate ExpenseBook

ExpenseBook -> Model
deactivate ExpenseBook

Model -> Model
deactivate Model

Model -> Model : updateFilteredExpenseList(predicate)
activate Model

Model -> ExpenseBook : updateFilteredExpenses(predicate)
activate ExpenseBook

ExpenseBook -> Model
deactivate ExpenseBook

Model -> Model
deactivate Model

Model -> Model
deactivate Model

Model --> SwitchCommand
deactivate Model

SwitchCommand --> LogicManager : result
deactivate SwitchCommand
SwitchCommand -[hidden]-> LogicManager : result
destroy SwitchCommand

[<--LogicManager
deactivate LogicManager
@enduml
